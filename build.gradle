plugins {
    id 'java'
    id 'signing'
    id 'java-library'
    id 'maven-publish'
}

group 'io.github.snailrend.dictionary'
version '1.0.0'
java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    options.addStringOption("charset", "UTF-8")
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }

}
allprojects {
    tasks.withType(Javadoc).all { enabled = false }
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'dictionary'
            from components.java
            pom {
                name = 'dictionary'
                description = '字典与状态码的翻译'
                url = 'https://github.com/snailrend/dictionary'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/snailrend/dictionary/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'snailrend'
                        name = 'snailrend'
                        email = 'snailrend@163.co,'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/snailrend/dictionary.git'
                    developerConnection = 'scm:git:ssh://github.com/snailrend/dictionary.git'
                    url = 'https://github.com/snailrend/dictionary'
                }
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            if (project.version.toString().endsWith("-SNAPSHOT")) {
                url = "https://s01.oss.sonatype.org/content/repositories/snapshots"
            } else {
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            }
            credentials {
                username = findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                password = findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}
signing {
    sign(publishing.publications.mavenJava)
}
repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}